// Targeted by JavaCPP version 1.5.8-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.tensorflowlite;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.tensorflowlite.global.tensorflowlite.*;

// #endif  // __cplusplus

// --------------------------------------------------------------------------
// Opaque types used by the C API.

/** TfLiteSignatureRunner is used to run inference on a signature.
 * 
 *  Note: A signature refers to a computation supported by a model, identified
 *  by a distinct name, a list of named inputs and a list of named outputs. Each
 *  named input/output is associated with a specific input/output tensor. A
 *  model can have multiple signatures. */
// To learn more about signatures in TFLite, refer to:
// https://www.tensorflow.org/lite/guide/signatures
/**
/** Using the TfLiteSignatureRunner, for a particular signature, you can set its
/** inputs, invoke (i.e. execute) the computation, and retrieve its outputs. */

///
@Opaque @Properties(inherit = org.bytedeco.tensorflowlite.presets.tensorflowlite.class)
public class TfLiteSignatureRunner extends Pointer {
    /** Empty constructor. Calls {@code super((Pointer)null)}. */
    public TfLiteSignatureRunner() { super((Pointer)null); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TfLiteSignatureRunner(Pointer p) { super(p); }
}
